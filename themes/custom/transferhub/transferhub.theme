<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Theme\ThemeSettings;
use Drupal\system\Form\ThemeSettingsForm;
use Drupal\Core\Form;

//THEME Settings
function transferhub_form_system_theme_settings_alter(&$form, Drupal\Core\Form\FormStateInterface $form_state) {


    $form['transferhub_settings'] = array(
        '#type' => 'vertical_tabs',
        "#title" => t("Transferhub Settings"),
        '#default_tab' => 'edit-slideshow'
    ) ;

    //HOME BANNER
    //text
    $form['home_banner'] = array(
        '#type' => 'details',
        '#title' => t('Home banner'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'transferhub_settings',
    );
    $form['home_banner']['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => theme_get_setting('title', 'transferhub'),
        //'#field_prefix' => '#',
    );
    $form['home_banner']['subtitle'] = array(
        '#type' => 'textfield',
        '#title' => t('Subtitle'),
        '#default_value' => theme_get_setting('subtitle', 'transferhub'),
        //'#field_prefix' => '#',
    );
    //images
    $form['home_banner']['background_image'] = array(
        '#type' => 'textfield',
        '#title' => t('Background image'),
        '#default_value' => theme_get_setting('background_image', 'transferhub'),
        '#description' => t("Indicate the path of the uploaded image relative to theme's base path (size: 1600 x 1067 px)"),
    );
    $form['home_banner']['side_image'] = array(
        '#type' => 'textfield',
        '#title' => t('Side image'),
        '#default_value' => theme_get_setting('side_image', 'transferhub'),
        '#description' => t("Indicate the path of the uploaded image relative to theme's base path (size: 409 x 532 px)"),
    );
    //button
    $form['home_banner']['include_button'] = array(
        '#type' => 'checkbox',
        '#title' => t('Include button'),
        '#default_value' => theme_get_setting('include_button', 'transferhub'),
    );
    $form['home_banner']['button_link'] = array(
        '#type' => 'textfield',
        '#title' => t('Button link'),
        '#default_value' => theme_get_setting('button_link', 'transferhub'),
    );
    $form['home_banner']['button_caption'] = array(
        '#type' => 'textfield',
        '#title' => t('Button caption'),
        '#default_value' => theme_get_setting('button_caption', 'transferhub'),
    );

    //SOCIAL
    $form['social'] = array(
        '#type' => 'details',
        '#title' => t('Social icons'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'transferhub_settings',
        '#description' => t("Links to be used in the footer icons"),
    );
    $form['social']['facebook_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Facebook link'),
        '#default_value' => theme_get_setting('facebook_url', 'transferhub'),
        //'#field_prefix' => '#',
    );
    $form['social']['twitter_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Twitter link'),
        '#default_value' => theme_get_setting('twitter_url', 'transferhub'),
        //'#field_prefix' => '#',
    );
    $form['social']['google_plus_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Google+ link'),
        '#default_value' => theme_get_setting('google_plus_url', 'transferhub'),
        //'#field_prefix' => '#',
    );
    $form['social']['linkedin_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Linkedin link'),
        '#default_value' => theme_get_setting('linkedin_url', 'transferhub'),
        //'#field_prefix' => '#',
    );
}

//Preprocess functions
function transferhub_preprocess_page(&$variables)
{
    //THEME variables
    //Bootstrap settings
    if ($variables["theme"]["settings"]["logo"]["use_default"] != 1)
    {
        //$variables["theme"]["settings"]["logo"]["realpath"] = \Drupal::service("file_system")->realpath($variables["theme"]["settings"]["logo"]["path"]);
        $variables["theme"]["settings"]["logo"]["url"] = file_create_url($variables["theme"]["settings"]["logo"]["path"]);
    }

    //Transferhub settings
    //home banner
    $variables["theme"]["settings"]["home_banner"]['title'] = theme_get_setting('title','transferhub');
    $variables["theme"]["settings"]["home_banner"]['subtitle'] = theme_get_setting('subtitle','transferhub');    
    $variables["theme"]["settings"]["home_banner"]['background_image'] = theme_get_setting('background_image','transferhub');
    $variables["theme"]["settings"]["home_banner"]['side_image'] = theme_get_setting('side_image','transferhub');
    $variables["theme"]["settings"]["home_banner"]['include_button'] = theme_get_setting('include_button','transferhub');
    $variables["theme"]["settings"]["home_banner"]['button_link'] = theme_get_setting('button_link','transferhub');
    $variables["theme"]["settings"]["home_banner"]['button_caption'] = theme_get_setting('button_caption','transferhub');
    //social
    $variables["theme"]["settings"]["social"]['facebook_url'] = theme_get_setting('facebook_url','transferhub');
    $variables["theme"]["settings"]["social"]['twitter_url'] = theme_get_setting('twitter_url','transferhub');
    $variables["theme"]["settings"]["social"]['google_plus_url'] = theme_get_setting('google_plus_url','transferhub');
    $variables["theme"]["settings"]["social"]['linkedin_url'] = theme_get_setting('linkedin_url','transferhub');

    //Search block
    //$variables['last_projects'] = \Drupal::service('renderer')->render(views_embed_view('projectes','block_1'));
    $active_theme = \Drupal::service('theme.manager')->getActiveTheme();
    $block = \Drupal\block\BlockViewBuilder::lazyBuilder($active_theme->getName()."_search","full");
    $variables['search_block'] = Drupal::service('renderer')->render($block);

    //is node? (otherwise it is system form, node form, workflow node form, view page...)
    //kint(\Drupal::request()->attributes);
    $variables["is_node"] = \Drupal::routeMatch()->getParameter("node") && !in_array(\Drupal::request()->attributes->get("_route"),array("entity.node.edit_form","entity.node.workflow_history"));
    //\Drupal::request()->attributes->get("_entity_form") != "node.edit" ;
    //todo treure xivato
    /*if ($variables["is_node"])
        drupal_set_message("page is: node");
    else
        drupal_set_message("page is: system, edit, view page... (?)");*/
}

function transferhub_preprocess_block(&$variables)
{
    //make installation base path available in block templates
    //drupal_set_message($variables["plugin_id"]);
    $variables["base_path"] = base_path();

    //language
    /*$variables["language"] = \Drupal::languageManager()->getCurrentLanguage()->getId();
    drupal_set_message(\Drupal::languageManager()->getCurrentLanguage()->getId());*/

    //Disable cache for specific blocks
    $excluded_blocks = array("views_block:advertisments-block_1");    
    if (in_array($variables["plugin_id"],$excluded_blocks))
    {
       $variables["content"]["#cache"]["max-age"] = 0;
    }

    //process bold font
    $processTitle = array("views_block:projects-block_1","contact_block");
    if (in_array($variables["plugin_id"],$processTitle))
    {
        $variables["label"] = _transferhub_processBoldText($variables["label"]);
    }
}

function transferhub_preprocess_node(&$variables)
{
    /*drupal_set_message($variables["view_mode"]); //todo treure xivatus
    drupal_set_message($variables["node"]->getType());
    drupal_set_message($variables["teaser"]);*/

    //make installation base path available in node templates
    $variables["base_path"] = base_path();

    if ($variables["node"]->getType() == "project")
    {
        //todo esborrar -> $node= \Drupal\node\Entity\Node::load(\Drupal::routeMatch()->getParameter('node')->id());
        $node = $variables["node"];

        switch($variables["view_mode"]){ //view mode, full ...
            case "teaser": {
                //Required devices
                $variables["required_devices"] = $node->get("field_desktop")->getValue()[0]["value"]
                                                    + $node->get("field_desktop_with_peripherals")->getValue()[0]["value"]
                                                    + $node->get("field_laptop")->getValue()[0]["value"]
                                                    + $node->get("field_mobile_phone")->getValue()[0]["value"]
                                                    + $node->get("field_tablet_computer")->getValue()[0]["value"]
                                                    + $node->get("field_computer_monitor")->getValue()[0]["value"];

                //is current page "My projectes?
                if (\Drupal::routeMatch()->getRouteName() == "view.projects.page_2"){
                    $variables["is_my_projects_page"] = true;

                    //Get workflow info
                    $state = $node->get("field_workflow")->getValue()[0]["value"];
                    switch($state)
                    {
                        case "project_workflow_creation": { }
                        case "project_workflow_draft": {
                            $variables["state_lbl_class"] = "label-default";
                            $variables["state_text"] = t("Draft");
                            break;
                        }
                        case "project_workflow_rejected": {
                            $variables["state_lbl_class"] = "label-warning";
                            $variables["state_text"] = t("Rejected");
                            break;
                        }
                        case "project_workflow_waiting_for_assignment": {
                            $variables["state_lbl_class"] = "label-info";
                            $variables["state_text"] = t("Waiting for assignment");
                            break;
                        }
                        case "project_workflow_devices_allocated": {
                            $variables["state_lbl_class"] = "label-warning";
                            $variables["state_text"] = t("Allocated devices");
                            break;
                        }
                        case "project_workflow_devices_received": {
                            $variables["state_lbl_class"] = "label-primary";
                            $variables["state_text"] = t("Received devices");
                            break;
                        }
                        case "project_workflow_cancelled": {
                            $variables["state_lbl_class"] = "label-danger";
                            $variables["state_text"] = t("Cancelled");
                            break;
                        }
                        case "project_workflow_finished": {
                            $variables["state_lbl_class"] = "label-success";
                            $variables["state_text"] = t("Finished");
                            break;
                        }
                        default: {
                            $variables["state_lbl_class"] = "label-default";
                            $variables["state_text"] = t("Draft");
                            break;
                        }

                    }
                }
                break;
            }
            default: { // full... //todo esborrar -> if ( \Drupal::routeMatch()->getParameter('node') && \Drupal::routeMatch()->getParameter('node')->getType() == "project") {

                //kint($variables); die;
                //is manager?
                $variables["is_manager"] = in_array("manager",array_values(\Drupal::currentUser()->getRoles()));
                //current user id
                $variables["current_uid"] = \Drupal::currentUser()->id();
                //node author uid
                $variables["author_uid"] = $node->getOwnerId();

                //load Allocated devices
                foreach ($node->field_allocated_devices->getValue() as $entity_id)
                {
                    //kint($entity_id["value"]); die;
                    $device = \Drupal\field_collection\Entity\FieldCollectionItem::load($entity_id["value"]);
                    $variables["allocated"][] = array(
                        "id" =>  $device->get("field_id"),
                        "type" =>  $device->get("field_type"),
                        "subtype" =>  $device->get("field_subtype"),
                        "manufacturer" =>  $device->get("field_manufacturer"),
                        "model" =>  $device->get("field_model"),
                        "url" =>  $device->get("field_url"),
                    );
                }

                //load Received devices
                foreach ($node->field_received_devices->getValue() as $entity_id)
                {
                    //kint($entity_id["value"]); die;
                    $device = \Drupal\field_collection\Entity\FieldCollectionItem::load($entity_id["value"]);
                    $variables["received"][] = array(
                        "id" =>  $device->get("field_id"),
                        "type" =>  $device->get("field_type"),
                        "subtype" =>  $device->get("field_subtype"),
                        "manufacturer" =>  $device->get("field_manufacturer"),
                        "model" =>  $device->get("field_model"),
                        "url" =>  $device->get("field_url"),
                    );
                }
                
                //load donors
                //todo


                //load voting block
                if (\Drupal::moduleHandler()->moduleExists('transferhub_vote')) {
                    $block = \Drupal\block\BlockViewBuilder::lazyBuilder("transferhubvotingblock", "full");
                    $block["#configuration"]["label"] = null;
                    $variables['vote_block'] = Drupal::service('renderer')->render($block);
                }

                //Organization
                $variables["use_existing_organization"] = $node->get("field_use_existing_organization")->getValue()[0]["value"];

                //Required devices
                $variables["desktop"] = $node->get("field_desktop")->getValue()[0]["value"];
                $variables["desktop_with_peripherals"] =  $node->get("field_desktop_with_peripherals")->getValue()[0]["value"];
                $variables["laptop"] =  $node->get("field_laptop")->getValue()[0]["value"];
                $variables["mobile_phone"] =  $node->get("field_mobile_phone")->getValue()[0]["value"];
                $variables["tablet_computer"] =  $node->get("field_tablet_computer")->getValue()[0]["value"];
                $variables["computer_monitor"] =  $node->get("field_computer_monitor")->getValue()[0]["value"];

                       
                //Make regions available in node.html.twig
                // Allowed view modes
                $view_mode = $variables['view_mode']; // Retrieve view mode
                $allowed_view_modes = ['full']; // Array of allowed view modes (for performance so as to not execute on unneeded nodes)

                // If view mode is in allowed view modes list, pass to THEME_add_regions_to_node()
                if (in_array($view_mode, $allowed_view_modes)) {
                    // Allowed regions (for performance so as to not execute for unneeded region)
                    $allowed_regions = ['sidebar_project'];
                    transferhub_add_regions_to_node($allowed_regions, $variables);
                }
                break;
            }
        }
    }
}

function transferhub_add_regions_to_node($allowed_regions, &$variables) {
    // Retrieve active theme
    $theme = \Drupal::theme()->getActiveTheme()->getName();

    // Retrieve theme regions
    $available_regions = system_region_list($theme, 'REGIONS_ALL');

    // Validate allowed regions with available regions
    $regions = array_intersect(array_keys($available_regions), $allowed_regions);

    // For each region
    foreach ($regions as $key => $region) {

        // Load region blocks
        $blocks = entity_load_multiple_by_properties('block', array('theme' => $theme, 'region' => $region));

        // Sort ‘em
        uasort($blocks, 'Drupal\block\Entity\Block::sort');

        // Capture viewable blocks and their settings to $build
        $build = array();
        foreach ($blocks as $key => $block) {
            if ($block->access('view')) {
                $build[$key] = entity_view($block, 'block');
            }
        }

        // Add build to region
        $variables[$region] = $build;
    }
}

//Form ALTERS
function transferhub_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
    //Drupal forms

    //USER
    //login (user_login_form)
    if ($form_id == 'user_login_form')
    {
        unset($form['actions']['submit']['#attributes']['class']['btn-default']);
        $form['actions']['submit']['#attributes']['class'][] = 'btn-success';
    }
    //register (user_register_form)
    //passord (user_pass)
    if ($form_id == 'user_pass')
    {
        unset($form['actions']['submit']['#attributes']['class']['btn-primary']);
        $form['actions']['submit']['#attributes']['class'][] = 'btn-success';
    }
    //profile edit (user_form)

    //NODE
    //edit (node_project_edit_form)
    //workflow (workflow-transition-field-workflow-form--2)
    if ($form_id == 'workflow-transition-field-workflow-form--2')
    {
        unset($form['actions']['submit']['#attributes']['class']['btn-primary']);
        $form['actions']['submit']['#attributes']['class'][] = 'btn-success';
    }

    //views
    //exposed filters (views_exposed_form)
    if ($form_id == 'views_exposed_form')
    {
        unset($form['actions']['submit']['#attributes']['class']['btn-primary']);
        $form['actions']['submit']['#attributes']['class'][] = 'btn-success';
    }
}

//Contact form
//hook suggestions
function transferhub_form_contact_message_feedback_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
    // Name
    $form['name']['#prefix'] = '<div class="form-group">';
    $form['name']['#suffix'] = '</div>';
    $form['name']['#attributes']['placeholder'][] = $form['name']['#title'].'*';
    $form['name']['#attributes']['class'][] = 'form-control';
    unset($form['name']['#title']);

    // Mail
    $form['mail']['#prefix'] = '<div class="form-group">';
    $form['mail']['#suffix'] = '</div>';
    $form['mail']['#attributes']['placeholder'][] = $form['mail']['#title'].'*';
    $form['mail']['#attributes']['class'][] = 'form-control';
    unset($form['mail']['#title']);

    // Message
    $form['message']['widget'][0]['value']['#attributes']['class'][] = 'form-control';
    $form['message']['widget'][0]['value']['#attributes']['placeholder'][] = $form['message']['widget'][0]['#title'].'*';
    $form['message']['widget'][0]['#title'] = '';
    unset($form['message']['widget'][0]['value']['#title']);
    $form['message']['widget'][0]['#prefix'] = '<div class="form-group">';
    $form['message']['widget'][0]['#suffix'] = '</div>';

    // Submit
    $form['actions']['#prefix'] = "<div class='form-group'>";
    $form['actions']['#suffix'] = '</div>';
    $form['actions']['submit']['#attributes']['class'][] = 'btn';
    //$form['actions']['submit']['#attributes']['class'][] = 'btn-success';
    $form['actions']['submit']['#attributes']['class'][] = 'btn-primary';
    $form['actions']['submit']['#attributes']['class'][] = 'hidden';
    //$form['actions']['submit']['#attributes']['class'][] = 'pull-right';

    //preview
    unset($form["actions"]["preview"]);

}

//template form
function transferhub_theme_suggestions_alter(array &$suggestions, array $variables)
{
    //drupal_set_message($variables['element']['#type']);
    if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {

        $original_theme_hook = $variables['theme_hook_original'];
        $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);

    }
}

function _transferhub_processBoldText($text)
{
    if (substr_count("*",$text) % 2 != 0)
    {
        return $text;
    }

    $arr = explode("*",$text);
    $i = 0;
    $final = "";
    foreach($arr as $sub)
    {
        if ($i % 2 == 0)
            $d = "<strong>";
        else
            $d = "</strong>";

        $final .= $sub;
        if ($i < count($arr) -1 )
        {
            $final .= $d;
        }
        $i++;
    }
    return $final;
}
//todo delete
/*
function transferhub_theme_suggestions_submit_alter(array &$suggestions, array $variables)
{
   // drupal_set_message("submit suggestion alter!!!");
    if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {

        $original_theme_hook = $variables['theme_hook_original'];
        $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);

    }
}

function transferhub_theme_suggestions_input_alter(array &$suggestions, array $variables)
{
    //drupal_set_message("intput suggestion alter!!!");

    //kint($variables["element"]);
    //drupal_set_message($variables['element']["#value"]["string"]);


    if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'submit') {

      //  drupal_set_message($variables['element']["#value"]["string"]);

    }
    if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {

        $original_theme_hook = $variables['theme_hook_original'];
        $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);

    }
}


function transferhub_theme_suggestions_button_alter(array &$suggestions, array $variables)
{
    //drupal_set_message("intput button suggestion alter!!!");


    if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {

        $original_theme_hook = $variables['theme_hook_original'];
        $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);

    }
}


function transferhub_theme_suggestions_views_view_grid_alter(array &$suggestions, array $variables)
{
    drupal_set_message("SUGGESTIONS views grid alter!! *** ");

    drupal_set_message($variables['theme_hook_original']);

    kint($variables["element"]);

    if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {


        $original_theme_hook = $variables['theme_hook_original'];
        $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);

    }else
    {
        drupal_set_message("sí però no");
    }
}

function transferhub_preprocess_views_view_grid(&$variables)
{
    //kint($variables);
    drupal_set_message("preprocess grid!!");

    if ($variables["view"]["current_display"] == "block_1")
    {
                
    }

}
*/
